# Upstream definitions
upstream kong {
    server 127.0.0.1:8000;
    keepalive 32;
}

upstream grafana {
    server 127.0.0.1:3000;
    keepalive 32;
}

upstream backend-ryo {
    server 127.0.0.1:9002;
    keepalive 32;
}

upstream backend-md {
    server 127.0.0.1:9001;
    keepalive 32;
}

upstream prometheus {
    server 127.0.0.1:9090;
    keepalive 32;
}

# HTTP Server (for ACME challenges and redirects)
server {
    listen 80;
    listen [::]:80;
    server_name api.kcsi.id;

    # Document root for static files and ACME challenges
    root /var/www/html;
    index index.html index.htm;

    # Security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # File upload settings
    client_max_body_size 100M;
    client_body_timeout 120s;
    client_header_timeout 120s;

    # ACME challenge for SSL certificate - MUST be first
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        try_files $uri $uri/ =404;
        allow all;
        auth_basic off;
    }

    # Health check endpoint
    location = /health {
        access_log off;
        return 200 "healthy HTTP\n";
        add_header Content-Type text/plain;
    }

    # Redirect to HTTPS (except ACME challenges)
    location / {
        # Allow ACME challenges to pass through
        if ($uri !~ "^/.well-known/acme-challenge/") {
            return 301 https://$server_name$request_uri;
        }
        # This won't be reached due to redirect above, but kept for completeness
        proxy_pass http://kong;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health check endpoint
    location = /health {
        access_log off;
        return 200 "healthy HTTP\n";
        add_header Content-Type text/plain;
    }

    # Redirect to HTTPS (except ACME challenges)
    location / {
        # Allow ACME challenges to pass through
        if ($uri !~ "^/.well-known/acme-challenge/") {
            return 301 https://$server_name$request_uri;
        }
        # This won't be reached due to redirect above, but kept for completeness
        proxy_pass http://kong;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Remove all the static files, grafana, prometheus locations from HTTP
    # They should only be accessible via HTTPS

    # Block sensitive files
    location ~ /\.(ht|git|env|svn|bzr) {
        deny all;
        return 404;
    }

    location ~* \.(py|pyc|pyo|pyd|pyw|pyz|egg|egg-info)$ {
        deny all;
        return 404;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /usr/share/nginx/html;
    }

    location = /404.html {
        root /usr/share/nginx/html;
    }

    # Logging
    access_log /var/log/nginx/api.kcsi.id-access.log combined;
    error_log /var/log/nginx/api.kcsi.id-error.log warn;
}

# HTTPS Server (will be configured after SSL certificate)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.kcsi.id;

    # SSL configuration (will be managed by Certbot)
    ssl_certificate /etc/letsencrypt/live/api.kcsi.id/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.kcsi.id/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Additional SSL security
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security headers for HTTPS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss:; frame-ancestors 'self';" always;

    # File upload settings
    client_max_body_size 100M;
    client_body_timeout 120s;
    client_header_timeout 120s;

    # Backend-RYO Static Files (HTTPS)
    location /ryo-api/staticfiles/ {
        alias /opt/backend-ryo/staticfiles/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/css text/javascript application/javascript application/json image/svg+xml;
        
        try_files $uri $uri/ @backend_ryo_fallback_https;
    }

    # Backend-RYO Media Files (HTTPS)
    location /ryo-api/media/ {
        alias /opt/backend-ryo/media/;
        expires 30d;
        add_header Cache-Control "public";
        add_header Access-Control-Allow-Origin "*";
        
        location ~* \.(php|py|pl|sh|exe|bat)$ {
            deny all;
            return 404;
        }
        
        try_files $uri $uri/ @backend_ryo_fallback_https;
    }

    # Fallback for HTTPS
    location @backend_ryo_fallback_https {
        proxy_pass http://backend-ryo;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Grafana (HTTPS)
    location /grafana/ {
        proxy_pass http://grafana/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        
        proxy_cache_bypass $http_upgrade;
        proxy_buffering off;
    }

    # Prometheus (HTTPS)
    location /prometheus/ {
        proxy_pass http://prometheus/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Kong Admin API (HTTPS) - Restrict access for security
    location /kong-admin/ {
        proxy_pass http://127.0.0.1:8001/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Restrict access to admin API - IMPORTANT FOR SECURITY
        allow 10.0.0.0/8;        # AWS VPC
        allow 192.168.0.0/16;    # Private networks
        allow 172.16.0.0/12;     # Docker networks
        deny all;
    }

    # Health check
    location = /health {
        access_log off;
        return 200 "healthy HTTPS\n";
        add_header Content-Type text/plain;
    }

    # Main Kong Gateway (HTTPS)
    location / {
        proxy_pass http://kong;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        send_timeout 60s;

        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }

    # Block sensitive files
    location ~ /\.(ht|git|env|svn|bzr) {
        deny all;
        return 404;
    }

    location ~* \.(py|pyc|pyo|pyd|pyw|pyz|egg|egg-info)$ {
        deny all;
        return 404;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /usr/share/nginx/html;
    }

    location = /404.html {
        root /usr/share/nginx/html;
    }

    # Logging
    access_log /var/log/nginx/api.kcsi.id-access.log combined;
    error_log /var/log/nginx/api.kcsi.id-error.log warn;
}